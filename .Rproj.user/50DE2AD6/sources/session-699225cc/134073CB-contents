---
title: "02_Calculus_model"
output: html_document
date: "2024-05-3"
---


# Load data

* Se busca predecir el periodo post al periodo de intervencion, 2006 al 2010

* Modelos NNAR, PROPHET XGB, ARIMA XGB

## PAMAFRO

```{r,message=F,warning=F}



library(tidymodels)
library(modeltime)
library(timetk)
library(tidyverse)


db.pamafro        <- readRDS("db_loreto_its.rds") %>% 
                     filter(year<=2010)       %>% 
                     mutate(date  = date_first,
                            id    = as.factor(prov),# CLASE factor
                                                    # CON TEXTO feature enginnering invalido
                            value.v = v.cases,
                            value.f = f.cases
                            ) %>% 
                     select(id,value.v,value.f,date,prcp_std,tmax_std)
 


```


## MALARIA CERO


```{r,message=F,warning=F}

db.mcero          <- readRDS("db_loreto_its.rds") %>% 
                     filter(year>=2011)       %>% 
                     mutate(date  = date_first,
                            id    = as.factor(prov),
                            value.v = v.cases,
                            value.f = f.cases
                            ) %>% 
                     select(id,value.v,value.f,date,prcp_std,tmax_std)


```





# Train test sample

  
## PAMAFRO

```{r,message=F,warning=F}

# 5 años periodo post intervecion

splits_v_pfro          <-   db.pamafro                  %>%
                            group_by(id)                %>%  
                             mutate(id = droplevels(id)) %>% 
                            select(-value.f)            %>% 
                            time_series_split(
                              assess     = "5 years",
                              cumulative = TRUE
                            )

# resamples_kfold_v_pfro <- training(splits_v_pfro) %>% 
#                           vfold_cv(v = 20)

resamples_kfold_v_pfro <- training(splits_v_pfro) %>%
                          time_series_cv(
                            date_var    = date,
                            assess      = "2 years", # tamaño de data que sera rolling 
                            skip        = "1 month",
                            cumulative  = TRUE,
                            slice_limit = 10   # num de cortes/splits =  filas , K - por estudios de
                                               # simulacion se ha visto que suele ser el optimo
                          )


# resamples_kfold_v_pfro%>%
#     plot_time_series_cv_plan(date, value.v, .interactive = FALSE)



# tk_time_series_cv_plan() %>%



################################################################################
# 3 años : periodos post intervencion

splits_f_pfro <- db.pamafro                   %>%
                  group_by(id)                %>%  
                  mutate(id = droplevels(id)) %>%  
                  select(-value.v)            %>% 
                  time_series_split(
                    assess     = "5 years",
                    cumulative = TRUE
                  )

resamples_kfold_f_pfro <-  training(splits_f_pfro)  %>%
                          time_series_cv(
                            date_var    = date,
                            assess      = "2 years", # tamaño de data que sera rolling 
                            skip        = "1 month",
                            cumulative  = TRUE,
                            slice_limit = 10   # num de cortes/splits =  filas , K numero optimo
)


```


## MALARIA CERO

```{r,message=F,warning=F}


splits_v_mcero          <-    db.mcero                    %>%
                              group_by(id)                %>%
                              mutate(id = droplevels(id)) %>% 
                              select(-value.f)            %>% 
                              time_series_split(
                                assess     = "3 years",
                                cumulative = TRUE
                              )

resamples_kfold_v_mcero <- training(splits_v_mcero)   %>%
                          time_series_cv(
                            date_var    = date,
                            assess      = "2 years", # tamaño de data que sera rolling 
                            skip        = "1 month",
                            cumulative  = TRUE,
                            slice_limit = 6   # num de cortes/splits =  filas 
)




################################################################################


splits_f_mcero <-   db.mcero                  %>%
                    group_by(id)                %>%
                  mutate(id = droplevels(id)) %>% 
                   select(-value.v)            %>% 
                   time_series_split(
                      assess     = "3 years",
                      cumulative = TRUE
                  )

resamples_kfold_f_mcero <-  training(splits_f_mcero)   %>%
                          time_series_cv(
                            date_var    = date,
                            assess      = "2 years", # tamaño de data que sera rolling 
                            skip        = "1 month",
                            cumulative  = TRUE,
                            slice_limit = 6   # num de cortes/splits =  filas 
)



```



# Recipes 

## PAMAFRO

```{r,message=F,warning=F}



###****************
 # rec_obj_v_pfro     <-   recipe(value.v ~., training(splits_v_pfro))%>%
 #                          step_timeseries_signature(date) %>%
 #                          step_rm(matches("(.iso$)|(.xts$)")) %>%
 #                          step_rm(contains("second"), contains("minute"), contains("hour"),
 #                                contains("am.pm")) %>% 
 #                          step_normalize(matches("(index.num$)|(_year$)")) %>%
 #                          step_dummy(all_nominal())

# 
#  rec_obj_v_pfro     <-   recipe(value.v ~., training(splits_v_pfro))%>%
#                           step_timeseries_signature(date) %>%
#                           step_rm(matches("(.iso$)|(.xts$)")) %>%
#                           step_rm(contains("second"), contains("minute"), contains("hour"),
#                                 contains("am.pm"),contains("wday"),
#                                 contains("date_mday"),contains("index.num"),
#                                 date_day,date_week2,date_week3,date_week4,date_mweek) %>%
#                           step_normalize(matches("(_year$)")) %>%
#                           # step_zv(all_predictor()) %>%
#                           # 
#                           step_dummy(contains("lbl"), one_hot = TRUE) %>%  # meses,dias one hot
#                           step_dummy(all_nominal())                        # prov one hot
#             
#  

 rec_obj_v_pfro     <-    recipe(value.v ~., training(splits_v_pfro))%>%
                          step_timeseries_signature(date) %>%
                          step_select(id,date,value.v,date_year,date_index.num, #date_month.lbl,
                                      matches("(prcp)|(tmax)")) %>%
                          step_normalize(matches("(index.num$)|(_year$)")) %>%
                         #step_dummy(contains("id"), one_hot = TRUE)         # error de one hot
                         # step_dummy(contains("lbl"), one_hot = TRUE) %>%
                         # step_rm( contains("lbl_01"))%>% 
                         step_dummy(all_nominal()) 
                         
 

                            
 # rec_obj_v_pfro     <-   recipe(value.v ~., training(splits_v_pfro))%>%
 #                          step_dummy(all_nominal())

 

# Revision de la bd post feature analysis
View(rec_obj_v_pfro %>% prep() %>% juice())


####******

# rec_obj_f_pfro     <-   recipe(value.f ~., training(splits_f_pfro)) %>%
#                           step_timeseries_signature(date) %>%
#                           step_rm(matches("(.iso$)|(.xts$)")) %>%
#                            step_rm(contains("second"), contains("minute"), contains("hour"),
#                                 contains("am.pm")) %>%
#                           step_normalize(matches("(index.num$)|(_year$)")) %>%
#                           step_dummy(all_nominal())


rec_obj_f_pfro     <-    recipe(value.f ~., training(splits_f_pfro))%>%
                          step_timeseries_signature(date) %>%
                          step_select(id,date,value.f,date_year,date_index.num,
                                      matches("(prcp)|(tmax)")) %>%
                          step_normalize(matches("(index.num$)|(_year$)")) %>%
                           #step_dummy(contains("lbl"), one_hot = TRUE) %>%
                         step_dummy(all_nominal())

 
```


## MALARIA CERO

```{r,message=F,warning=F}


######****** 
# rec_obj_v_mcero     <-  recipe(value.v ~., training(splits_v_mcero)) %>%
#                           step_timeseries_signature(date) %>%
#                           step_rm(matches("(.iso$)|(.xts$)")) %>%
#                           step_rm(contains("second"), contains("minute"), contains("hour"),
#                                 contains("am.pm")) %>% 
#                           step_normalize(matches("(index.num$)|(_year$)")) %>%
#                           step_dummy(all_nominal())

rec_obj_v_mcero     <-    recipe(value.v ~., training(splits_v_mcero))%>%
                          step_timeseries_signature(date) %>%
                          step_select(id,date,value.v,date_year,date_index.num,
                                      matches("(prcp)|(tmax)")) %>%
                          step_normalize(matches("(index.num$)|(_year$)")) %>%
                           #step_dummy(contains("lbl"), one_hot = TRUE) %>%
                         step_dummy(all_nominal())


# Revision de la bd 
db.v.mcero.1<-rec_obj_v_mcero %>% prep() %>% juice()



###***
# rec_obj_f_mcero     <-  recipe(value.f ~., training(splits_f_mcero)) %>%
#                           step_timeseries_signature(date) %>%
#                           step_rm(matches("(.iso$)|(.xts$)")) %>%
#                           step_rm(contains("second"), contains("minute"), contains("hour"),
#                                   contains("am.pm")) %>% 
#                           step_normalize(matches("(index.num$)|(_year$)")) %>%
#                           step_dummy(all_nominal())
# 
# 

rec_obj_f_mcero     <-    recipe(value.f ~., training(splits_f_mcero))%>%
                          step_timeseries_signature(date) %>%
                          step_select(id,date,value.f,date_year,date_index.num,
                                      matches("(prcp)|(tmax)")) %>%
                          step_normalize(matches("(index.num$)|(_year$)")) %>%
                           #step_dummy(contains("lbl"), one_hot = TRUE) %>%
                         step_dummy(all_nominal())



```



# Create model

```{r,message=F,warning=F}


################################################################################
# Model
model_phxgb_tune <- prophet_boost(  
                                mode               = "regression",
                                growth             = tune(),
                                changepoint_range    = tune(),
                                changepoint_num = tune(), # 
                                season          = tune (), # 
                                seasonality_yearly = tune(),
                                seasonality_weekly = tune(), # nuevo
                                prior_scale_changepoints  = tune(),
                                prior_scale_seasonality = tune(),
                                logistic_cap            = 4000, # can't be tuned
                                logistic_floor          = 0,
                          #xgboost  
                                mtry                    = tune(),
                                min_n                   = tune(),
                                tree_depth              = tune(),
                                learn_rate              = tune(),
                                loss_reduction          = tune(),
                                stop_iter               = tune()
                                ) %>%
                         set_engine("prophet_xgboost") 



###############################################################################

model_arxgb_tune <-    arima_boost(
                                non_seasonal_ar = tune(),
                                non_seasonal_ma = tune(),
                                non_seasonal_differences = tune(),
                                seasonal_period = tune(),
                                seasonal_ar = tune(),
                                seasonal_ma = tune(),
                                seasonal_differences = tune(),

                              #xgboost  
                                mtry            = tune(),        
                                min_n           = tune(),
                                tree_depth      = tune(),
                                learn_rate      = tune(),
                                loss_reduction       = tune(),
                                stop_iter            = tune()
                               ) %>%
                          #set_engine("arima_xgboost") #,method="ML"  
                          set_engine("arima_xgboost",method="ML")  #



#modelo de red neuronal
model_nnetar_tune<- nnetar_reg(
                     non_seasonal_ar = tune(),
                     seasonal_ar   = tune(),
                     hidden_units = tune(),
                     num_networks = tune(),
                     penalty = tune(),
                     epochs = tune()
                  ) %>%
                    set_engine("nnetar")




model_ar_tune <-    arima_reg(
                                mode               = "regression",
                                non_seasonal_ar = tune(),
                                non_seasonal_ma = tune(),
                                non_seasonal_differences = tune(),
 
                                 seasonal_period = tune(),
                                seasonal_ar = tune(),
                                seasonal_ma = tune(),
                                seasonal_differences = tune()

                               ) %>%
                          set_engine("auto_arima") 


# 2300 SEGURIDOS UN ARIMA CON 9 DE SEASONAL  Y    set_engine("arima",method="ML")  mas rapido autorima
# SMAPE buenos resultados, estos son los los 11_2


```



# Create WLFW by specie

## PAMAFRO

### Vivax

```{r,message=F,warning=F}




################################################################################
# Workflow
wflw_phxgb_tune_v_pfro      <-   workflow() %>%
                          add_model(
                              model_phxgb_tune
                          ) %>%
                          add_recipe(rec_obj_v_pfro)



################################################################################




wflw_arxgb_tune_v_pfro            <-  workflow() %>%
                              add_model(
                                   model_arxgb_tune
                              ) %>%
                              add_recipe(rec_obj_v_pfro) 


################################################################################
# Workflow red neuronal
wflw_ar_tune_v_pfro   <-  workflow() %>%
                          add_model(
                              model_ar_tune 
                          ) %>%
                          add_recipe(rec_obj_v_pfro)
    
    



################################################################################
# Workflow red neuronal
wflw_nnetar_tune_v_pfro   <-  workflow() %>%
                      add_model(
                          model_nnetar_tune
                      ) %>%
                      add_recipe(rec_obj_v_pfro)







```


### Falciparum

```{r,message=F,warning=F}




# Workflow
wflw_phxgb_tune_f_pfro      <-   workflow() %>%
                                  add_model(
                                      model_phxgb_tune
                                  ) %>%
                                  add_recipe(rec_obj_f_pfro) 

################################################################################

wflw_arxgb_tune_f_pfro           <-  workflow() %>%
                                    add_model(
                                         model_arxgb_tune
                                    ) %>%
                                    add_recipe(rec_obj_f_pfro) 

################################################################################

wflw_ar_tune_f_pfro           <-  workflow() %>%
                                    add_model(
                                         model_ar_tune
                                    ) %>%
                                    add_recipe(rec_obj_f_pfro) 


################################################################################


wflw_nnetar_tune_f_pfro  <-   workflow() %>%
                              add_model(
                                  model_nnetar_tune
                              ) %>%
                              add_recipe(rec_obj_f_pfro)




```




## MALARIA CERO

### Vivax

```{r,message=F,warning=F}




# Workflow
wflw_phxgb_tune_v_mcero      <-    workflow() %>%
                                  add_model(
                                      model_phxgb_tune
                                  ) %>%
                                  add_recipe(rec_obj_v_mcero)



################################################################################




wflw_arxgb_tune_v_mcero            <-  workflow() %>%
                                      add_model(
                                           model_arxgb_tune
                                      ) %>%
                                      add_recipe(rec_obj_v_mcero) 



################################################################################




wflw_ar_tune_v_mcero            <-  workflow() %>%
                                      add_model(
                                           model_ar_tune
                                      ) %>%
                                      add_recipe(rec_obj_v_mcero) 


################################################################################


wflw_nnetar_tune_v_mcero   <-  workflow() %>%
                              add_model(
                                  model_nnetar_tune
                              ) %>%
                              add_recipe(rec_obj_v_mcero)







```


### Falciparum

```{r,message=F,warning=F}



wflw_phxgb_tune_f_mcero      <-   workflow() %>%
                                  add_model(
                                      model_phxgb_tune
                                  ) %>%
                                  add_recipe(rec_obj_f_mcero) 

################################################################################



wflw_arxgb_tune_f_mcero           <-  workflow() %>%
                                      add_model(
                                           model_arxgb_tune
                                      ) %>%
                                      add_recipe(rec_obj_f_mcero) 


################################################################################



wflw_ar_tune_f_mcero           <-  workflow() %>%
                                      add_model(
                                           model_ar_tune
                                      ) %>%
                                      add_recipe(rec_obj_f_mcero) 


################################################################################


wflw_nnetar_tune_f_mcero  <-  workflow() %>%
                              add_model(
                                  model_nnetar_tune
                              ) %>%
                              add_recipe(rec_obj_f_mcero)
# 



```





# Generate grid search by model

```{r,message=F,warning=F}




set.seed(123)
grid_spec_phxgb_tune <- grid_latin_hypercube(
                              extract_parameter_set_dials(model_phxgb_tune) %>%
                        update(growth             =  growth(values = c("linear","logistic")),
                               #growth             =  growth(values = c("linear","logistic")),
                               changepoint_num  = changepoint_num(range=c(2,10),trans = NULL),
                               # <1 errores altos, y mensajes de error al oprtimazion
                               season             = season(values = c("additive", "multiplicative")),
                               changepoint_range  = changepoint_range(range=c(0.5,0.95),trans = NULL),
                               seasonality_yearly = seasonality_yearly(values = c(TRUE, FALSE)),
                               seasonality_weekly = seasonality_weekly(values = c(TRUE, FALSE)),
                              # logistic_cap   = c(4000,2500,1500),
                               prior_scale_changepoints =prior_scale_changepoints(range = c(0.01, 0.5),
                                                                                  trans = NULL),
                               prior_scale_seasonality=prior_scale_seasonality(range = c(0.08, 3.5),
                                                                                  trans = NULL),
                               mtry       = mtry(range = c(6, 12),trans = NULL),
                          min_n      = min_n(range = c(2L, 15L),trans = NULL),
                          tree_depth = tree_depth(range = c(7, 15),trans = NULL),
                          learn_rate = learn_rate(range = c(0.1, 0.5),trans = NULL),
                          loss_reduction=loss_reduction(range = c(-10,1.5),trans = log10_trans()),
                          stop_iter  =stop_iter(range = c(5L, 15L),trans = NULL)
                                                 ),
                              size = 25#40
                         )



#################################################################################################



set.seed(123)
grid_spec_arxgb_tune <- grid_latin_hypercube(
                              extract_parameter_set_dials(model_arxgb_tune) %>% 
                          update(
                           non_seasonal_ar = non_seasonal_ar(range = c(0L,12L),trans =NULL),
                           non_seasonal_ma = non_seasonal_ma(range = c(0L,12L),trans =NULL),
                      non_seasonal_differences = non_seasonal_differences(range = c(0L,6L),trans =NULL),
                          seasonal_period      =seasonal_period(values = c("none", "daily", 
                                                                           "weekly", "yearly")),
                          seasonal_ar          = seasonal_ar(range = c(0L,9L),trans =NULL),
                          seasonal_ma          = seasonal_ma(range= c(0L,9L),trans =NULL),
                         seasonal_differences   = seasonal_differences(range= c(0L,6L),trans =NULL),
                      
                          mtry       = mtry(range = c(6, 12),trans = NULL),
                          min_n      = min_n(range = c(2L, 15L),trans = NULL),
                          tree_depth = tree_depth(range = c(7, 15),trans = NULL),
                          learn_rate = learn_rate(range = c(0.1, 0.5),trans = NULL),
                          loss_reduction=loss_reduction(range = c(-10,1.5),trans = log10_trans()),
                          stop_iter  =stop_iter(range = c(5L, 15L),trans = NULL)
                                                 ),
                              size = 25#40
                        )




#################################################################################################




set.seed(123)
grid_spec_ar_tune <- grid_latin_hypercube(
                              extract_parameter_set_dials(model_ar_tune) %>% 
                          update(
                           non_seasonal_ar = non_seasonal_ar(range = c(0L,12L),trans =NULL),
                           non_seasonal_ma = non_seasonal_ma(range = c(0L,12L),trans =NULL),
                      non_seasonal_differences = non_seasonal_differences(range = c(0L,6L),trans =NULL),
                           seasonal_period      =seasonal_period(values = c("none", "daily", 
                                                                            "weekly", "yearly")),
                          seasonal_ar          = seasonal_ar(range = c(0L,9L),trans =NULL),
                          seasonal_ma          = seasonal_ma(range= c(0L,9L),trans =NULL),
                         seasonal_differences   = seasonal_differences(range= c(0L,6L),trans =NULL)
                                                 ),
                              size = 25#40
                        )



#################################################################################################



set.seed(123)
grid_spec_nnetar_tune <- grid_latin_hypercube(
                              extract_parameter_set_dials(model_nnetar_tune) %>%
                                  update(hidden_units = hidden_units(range = c(5, 10),trans = NULL),
                                         num_networks = num_networks(range = c(20, 50),trans = NULL),
                                         seasonal_ar  = seasonal_ar(range = c(0, 2),trans = NULL),
                                         non_seasonal_ar = non_seasonal_ar(range = c(0, 3),trans = NULL),
                                         epochs= epochs(range=c(35L,45L),trans = NULL)
                                                 ),
                              size = 25#40
                           )




```


# Hyperparameter Tuning

## PAMAFRO

### Vivax

```{r,message=F,warning=F}


library(tictoc)





################################################################################
tic()
tune_results_phxgb_v_pfro <- wflw_phxgb_tune_v_pfro %>%
                                tune_grid(
                                  resamples  = resamples_kfold_v_pfro,
                                  grid       = grid_spec_phxgb_tune,
                                  control    = control_grid(verbose = TRUE, 
                                                          allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                )
toc()

################################################################################


tic()  ### 2789
tune_results_arxgb_v_pfro <- wflw_arxgb_tune_v_pfro %>%
                                tune_grid(
                                  resamples  = resamples_kfold_v_pfro,
                                  grid       = grid_spec_arxgb_tune,
                                  control    = control_grid(verbose = TRUE, 
                                                          allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                )
toc()

################################################################################


tic() # 2300 SEGUNDOS ANTES con arima, 600 ahora con autoarima
tune_results_ar_v_pfro <- wflw_ar_tune_v_pfro %>%
                                tune_grid(
                                  resamples  = resamples_kfold_v_pfro,
                                  grid       = grid_spec_ar_tune,
                                  control    = control_grid(verbose = TRUE, 
                                                          allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                )
toc()

 

################################################################################

tic()
tune_results_nnetar_v_pfro <- wflw_nnetar_tune_v_pfro %>%
                                tune_grid(
                                  resamples  = resamples_kfold_v_pfro,
                                  grid       = grid_spec_nnetar_tune,
                                  control    = control_grid(verbose = TRUE,
                                                          allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                )
toc()

##########################################################################################

# 
# # anterior formulas con prohpet mejor en pmafro  Y AR XG E en PMC
# saveRDS(tune_results_phxgb_v_pfro ,"models_postuning/tune_pamafro_phxgb_vivax2024v11_1_0.rds") 
# saveRDS(tune_results_arxgb_v_pfro ,"models_postuning/tune_pamafro_arxgb_vivax2024v11_1_0.rds") 
# saveRDS(tune_results_ar_v_pfro ,"models_postuning/tune_pamafro_ar_vivax2024v11_1_0.rds") 
# saveRDS(tune_results_nnetar_v_pfro,"models_postuning/tune_pamafro_nnetar_vivax2024v11_1_0.rds")




tune_results_ar_v_pfro       <-  readRDS("models_postuning/tune_pamafro_ar_vivax2024v11_2_0.rds")

# Modelo sin estimacion ML
tune_results_arxgb_v_pfro    <-  readRDS("models_postuning/tune_pamafro_arxgb_vivax2024v11_2_0.rds")

tune_results_phxgb_v_pfro       <-  readRDS("models_postuning/tune_pamafro_phxgb_vivax2024v11_2_0.rds")
tune_results_nnetar_v_pfro    <-  readRDS("models_postuning/tune_pamafro_nnetar_vivax2024v11_2_0.rds")


saveRDS(tune_results_phxgb_v_pfro ,"models_postuning/tune_pamafro_phxgb_vivax2024v11_2_0.rds") 
saveRDS(tune_results_arxgb_v_pfro ,"models_postuning/tune_pamafro_arxgb_vivax2024v11_2_0.rds") 
saveRDS(tune_results_ar_v_pfro ,"models_postuning/tune_pamafro_ar_vivax2024v11_2_0.rds") 
saveRDS(tune_results_nnetar_v_pfro,"models_postuning/tune_pamafro_nnetar_vivax2024v11_2_0.rds")


# CON ESTIMACION  ML
saveRDS(tune_results_arxgb_v_pfro ,"models_postuning/tune_pamafro_arxgb_vivax2024v11_3_0.rds") 
tune_results_arxgb_v_pfro       <-  readRDS("models_postuning/tune_pamafro_arxgb_vivax2024v11_3_0.rds")

```



### Falciparum

```{r,message=F,warning=F}


library(tictoc)





################################################################################
tic()
tune_results_phxgb_f_pfro <- wflw_phxgb_tune_f_pfro %>%
                                tune_grid(
                                  resamples  = resamples_kfold_f_pfro,
                                  grid       = grid_spec_phxgb_tune,
                                  control    = control_grid(verbose = TRUE, 
                                                          allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                )
toc()


# 
################################################################################

tic()
tune_results_arxgb_f_pfro <- wflw_arxgb_tune_f_pfro %>%
                                tune_grid(
                                  resamples  = resamples_kfold_f_pfro,
                                  grid       = grid_spec_arxgb_tune,
                                  control    = control_grid(verbose = TRUE, 
                                                          allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                )
toc()
################################################################################

tic()
tune_results_ar_f_pfro <- wflw_ar_tune_f_pfro %>%
                                tune_grid(
                                  resamples  = resamples_kfold_f_pfro,
                                  grid       = grid_spec_ar_tune,
                                  control    = control_grid(verbose = TRUE, 
                                                          allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                )
toc()

################################################################################

tic()
tune_results_nnetar_f_pfro <- wflw_nnetar_tune_f_pfro %>%
                                tune_grid(
                                  resamples  = resamples_kfold_f_pfro,
                                  grid       = grid_spec_nnetar_tune,
                                  control    = control_grid(verbose = TRUE,
                                                          allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                )
toc()




tune_results_ar_f_pfro       <-  readRDS("models_postuning/tune_pamafro_ar_falciparum2024v11_2_0.rds")

# MODELO SIN ESTIMACION ML 
tune_results_arxgb_f_pfro    <-  readRDS("models_postuning/tune_pamafro_arxgb_falciparum2024v11_2_0.rds")


tune_results_phxgb_f_pfro    <-  readRDS("models_postuning/tune_pamafro_phxgb_falciparum2024v11_2_0.rds")   
tune_results_nnetar_f_pfro   <-  readRDS("models_postuning/tune_pamafro_nnetar_falciparum2024v11_2_0.rds")


saveRDS(tune_results_phxgb_f_pfro ,"models_postuning/tune_pamafro_phxgb_falciparum2024v11_2_0.rds")
saveRDS(tune_results_arxgb_f_pfro ,"models_postuning/tune_pamafro_arxgb_falciparum2024v11_2_0.rds")
saveRDS(tune_results_ar_f_pfro ,"models_postuning/tune_pamafro_ar_falciparum2024v11_2_0.rds")
saveRDS(tune_results_nnetar_f_pfro,"models_postuning/tune_pamafro_nnetar_falciparum2024v11_2_0.rds")


saveRDS(tune_results_arxgb_f_pfro ,"models_postuning/tune_pamafro_arxgb_falciparum2024v11_3_0.rds")
tune_results_arxgb_f_pfro    <-  readRDS("models_postuning/tune_pamafro_arxgb_falciparum2024v11_3_0.rds")


# saveRDS(tune_results_phxgb_f_pfro ,"models_postuning/tune_pamafro_phxgb_falciparum2024v11_1_0.rds")
# saveRDS(tune_results_arxgb_f_pfro ,"models_postuning/tune_pamafro_arxgb_falciparum2024v11_1_0.rds")
# saveRDS(tune_results_ar_f_pfro ,"models_postuning/tune_pamafro_ar_falciparum2024v11_1_0.rds")
# saveRDS(tune_results_nnetar_f_pfro,"models_postuning/tune_pamafro_nnetar_falciparum2024v11_1_0.rds")


```



## MALARIA CERO

### Vivax

```{r,message=F,warning=F}


library(tictoc)



#############################################################################

tic()
tune_results_phxgb_v_mcero <- wflw_phxgb_tune_v_mcero %>%
                                tune_grid(
                                  resamples  = resamples_kfold_v_mcero,
                                  grid       = grid_spec_phxgb_tune,
                                  control    = control_grid(verbose = TRUE, 
                                                          allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                )
toc()

################################################################################


tic()
tune_results_arxgb_v_mcero <- wflw_arxgb_tune_v_mcero %>%
                                tune_grid(
                                  resamples  = resamples_kfold_v_mcero,
                                  grid       = grid_spec_arxgb_tune,
                                  control    = control_grid(verbose = TRUE, 
                                                          allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                )
toc()

################################################################################


tic()
tune_results_ar_v_mcero   <- wflw_ar_tune_v_mcero %>%
                                tune_grid(
                                  resamples  = resamples_kfold_v_mcero,
                                  grid       = grid_spec_ar_tune,
                                  control    = control_grid(verbose = TRUE, 
                                                          allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                )
toc()


################################################################################

tic()
tune_results_nnetar_v_mcero   <-  wflw_nnetar_tune_v_mcero %>%
                                  tune_grid(
                                    resamples  = resamples_kfold_v_mcero,
                                    grid       = grid_spec_nnetar_tune,
                                    control    = control_grid(verbose = TRUE,
                                                            allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                  )
toc()


tune_results_ar_v_mcero       <-  readRDS("models_postuning/tune_mcero_ar_vivax2024v11_2_0.rds")
tune_results_arxgb_v_mcero    <-  readRDS("models_postuning/tune_mcero_arxgb_vivax2024v11_2_0.rds")

tune_results_nnetar_v_mcero   <-  readRDS("models_postuning/tune_mcero_nnetar_vivax2024v11_2_0.rds")
tune_results_phxgb_v_mcero    <-  readRDS("models_postuning/tune_mcero_phxgb_vivax2024v11_2_0.rds")

saveRDS(tune_results_nnetar_v_mcero,"models_postuning/tune_mcero_nnetar_vivax2024v11_2_0.rds")
saveRDS(tune_results_phxgb_v_mcero ,"models_postuning/tune_mcero_phxgb_vivax2024v11_2_0.rds")
saveRDS(tune_results_arxgb_v_mcero ,"models_postuning/tune_mcero_arxgb_vivax2024v11_2_0.rds")
saveRDS(tune_results_ar_v_mcero ,"models_postuning/tune_mcero_ar_vivax2024v11_2_0.rds")



saveRDS(tune_results_arxgb_v_mcero ,"models_postuning/tune_mcero_arxgb_vivax2024v11_3_0.rds")
tune_results_arxgb_v_mcero   <-  readRDS("models_postuning/tune_mcero_arxgb_vivax2024v11_3_0.rds")
# saveRDS(tune_results_nnetar_v_mcero,"models_postuning/tune_mcero_nnetar_vivax2024v11_1_0.rds")
# saveRDS(tune_results_phxgb_v_mcero ,"models_postuning/tune_mcero_phxgb_vivax2024v11_11_0.rds")
# saveRDS(tune_results_arxgb_v_mcero ,"models_postuning/tune_mcero_arxgb_vivax2024v11_1_0.rds")
# saveRDS(tune_results_ar_v_mcero ,"models_postuning/tune_mcero_ar_vivax2024v11_1_0.rds")





```


### Falciparum

```{r,message=F,warning=F}


library(tictoc)


################################################################################

tic()
tune_results_phxgb_f_mcero <- wflw_phxgb_tune_f_mcero %>%
                                tune_grid(
                                  resamples  = resamples_kfold_f_mcero,
                                  grid       = grid_spec_phxgb_tune,
                                  control    = control_grid(verbose = TRUE, 
                                                          allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                )
toc()

################################################################################


tic()
tune_results_arxgb_f_mcero <- wflw_arxgb_tune_f_mcero %>%
                                tune_grid(
                                  resamples  = resamples_kfold_f_mcero,
                                  grid       = grid_spec_arxgb_tune,
                                  control    = control_grid(verbose = TRUE, 
                                                          allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                )
toc()


################################################################################


tic()
tune_results_ar_f_mcero <- wflw_ar_tune_f_mcero %>%
                                tune_grid(
                                  resamples  = resamples_kfold_f_mcero,
                                  grid       = grid_spec_ar_tune,
                                  control    = control_grid(verbose = TRUE, 
                                                          allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                )
toc()


################################################################################


tic()
tune_results_nnetar_f_mcero <- wflw_nnetar_tune_f_mcero %>%
                                tune_grid(
                                  resamples  = resamples_kfold_f_mcero,
                                  grid       = grid_spec_nnetar_tune,
                                  control    = control_grid(verbose = TRUE,
                                                          allow_par = TRUE),
                                  metrics = metric_set(rmse,mae,mase,mape,smape,huber_loss)
                                )
toc()




saveRDS(tune_results_phxgb_f_mcero ,"models_postuning/tune_mcero_phxgb_falciparumv11_2_0.rds")
saveRDS(tune_results_arxgb_f_mcero ,"models_postuning/tune_mcero_arxgb_falciparumv11_2_0.rds")
saveRDS(tune_results_ar_f_mcero ,"models_postuning/tune_mcero_ar_falciparumv11_2_0.rds")
saveRDS(tune_results_nnetar_f_mcero,"models_postuning/tune_mcero_nnetar_falciparumv11_2_0.rds")



tune_results_ar_f_mcero       <-  readRDS("models_postuning/tune_mcero_ar_falciparumv11_2_0.rds")
tune_results_arxgb_f_mcero    <-  readRDS("models_postuning/tune_mcero_arxgb_falciparumv11_2_0.rds")
 
tune_results_phxgb_f_mcero    <-  readRDS("models_postuning/tune_mcero_phxgb_falciparumv11_2_0.rds")
tune_results_nnetar_f_mcero   <-  readRDS("models_postuning/tune_mcero_nnetar_falciparumv11_2_0.rds")

saveRDS(tune_results_arxgb_f_mcero ,"models_postuning/tune_mcero_arxgb_falciparumv11_3_0.rds")
tune_results_arxgb_f_mcero    <-   readRDS("models_postuning/tune_mcero_arxgb_falciparumv11_3_0.rds")

# saveRDS(tune_results_phxgb_f_mcero ,"models_postuning/tune_mcero_phxgb_falciparumv11_1_0.rds")
# saveRDS(tune_results_arxgb_f_mcero ,"models_postuning/tune_mcero_arxgb_falciparumv11_1_0.rds")
# saveRDS(tune_results_ar_f_mcero ,"models_postuning/tune_mcero_ar_falciparumv11_1_0.rds")
# saveRDS(tune_results_nnetar_f_mcero,"models_postuning/tune_mcero_nnetar_falciparumv11_1_0.rds")



# 
# tune_results_phxgb_f_mcero  <- readRDS("tune_mcero_phxgb_falciparum_1_0.rds")
# tune_results_arxgb_f_mcero  <- readRDS("tune_mcero_arxgb_falciparum_1_0.rds")
# tune_results_nnetar_f_mcero <- readRDS("tune_mcero_nnetar_falciparum_1_0.rds")




```


# Select the best model accord to error criteria (RMSE)

## PAMAFRO

### Vivax


```{r,message=F,warning=F}

error_metric <- "smape" # para la version 3 bueno  huber loss 11_3 , con el ML PUESTO EN ARIMA-XGBOOST


set.seed(123)
wflw_fit_phxgb_tuned_v_pfro <-    wflw_phxgb_tune_v_pfro %>%
                                 finalize_workflow(
                                 select_best(tune_results_phxgb_v_pfro, error_metric, n=1)) %>%
                                 fit(training(splits_v_pfro)) # rmse


set.seed(123)
wflw_fit_arxgb_tuned_v_pfro <-     wflw_arxgb_tune_v_pfro %>%
                                   finalize_workflow(
                                   select_best(tune_results_arxgb_v_pfro, error_metric, n=1)) %>%
                                   fit(training(splits_v_pfro))


set.seed(123)
wflw_fit_ar_tuned_v_pfro   <-     wflw_ar_tune_v_pfro %>%
                                   finalize_workflow(
                                   select_best(tune_results_ar_v_pfro, error_metric, n=1)) %>%
                                   fit(training(splits_v_pfro))


set.seed(123)
wflw_fit_nnetar_tuned_v_pfro <-  wflw_nnetar_tune_v_pfro %>%
                                 finalize_workflow(
                                 select_best(tune_results_nnetar_v_pfro, error_metric, n=1)) %>%
                                 fit(training(splits_v_pfro))






```

### Falciparum

```{r,message=F,warning=F}

# Pocas son las medidas que acepta para seleccionar el mejor modelo

set.seed(123)
wflw_fit_phxgb_tuned_f_pfro <-    wflw_phxgb_tune_f_pfro %>%
                           finalize_workflow(
                           select_best(tune_results_phxgb_f_pfro, error_metric, n=1)) %>%
                           fit(training(splits_f_pfro))



set.seed(123)
wflw_fit_arxgb_tuned_f_pfro <-      wflw_arxgb_tune_f_pfro %>%
                             finalize_workflow(
                             select_best(tune_results_arxgb_f_pfro, error_metric, n=1)) %>%
                             fit(training(splits_f_pfro))


set.seed(123)
wflw_fit_nnetar_tuned_f_pfro <-      wflw_nnetar_tune_f_pfro %>%
                                     finalize_workflow(
                                     select_best(tune_results_nnetar_f_pfro, error_metric, n=1)) %>%
                                     fit(training(splits_f_pfro))


set.seed(123)
wflw_fit_ar_tuned_f_pfro     <-      wflw_ar_tune_f_pfro %>%
                                     finalize_workflow(
                                     select_best(tune_results_ar_f_pfro, error_metric, n=1)) %>%
                                     fit(training(splits_f_pfro))




```








## MALARIA CERO

### Vivax


```{r,message=F,warning=F}



set.seed(123)
wflw_fit_phxgb_tuned_v_mcero <-    wflw_phxgb_tune_v_mcero %>%
                                   finalize_workflow(
                                   select_best(tune_results_phxgb_v_mcero,error_metric, n=1)) %>%
                                   fit(training(splits_v_mcero))



set.seed(123)
wflw_fit_arxgb_tuned_v_mcero <-  wflw_arxgb_tune_v_mcero %>%
                                 finalize_workflow(
                                 select_best(tune_results_arxgb_v_mcero, error_metric, n=1)) %>%
                                 fit(training(splits_v_mcero))


set.seed(123)
wflw_fit_nnetar_tuned_v_mcero <-   wflw_nnetar_tune_v_mcero %>%
                                   finalize_workflow(
                                   select_best(tune_results_nnetar_v_mcero, error_metric, n=1)) %>%
                                   fit(training(splits_v_mcero))
# rmse

set.seed(123)
wflw_fit_ar_tuned_v_mcero <-   wflw_ar_tune_v_mcero %>%
                                   finalize_workflow(
                                   select_best(tune_results_ar_v_mcero, error_metric, n=1)) %>%
                                   fit(training(splits_v_mcero))

# mape corrio el antiugo

```

### Falciparum

```{r,message=F,warning=F}



# Pocas son las medidas que acepta para seleccionar el mejor modelo: RMSE
set.seed(123)
wflw_fit_phxgb_tuned_f_mcero <-  wflw_phxgb_tune_f_mcero %>%
                                 finalize_workflow(
                                 select_best(tune_results_phxgb_f_mcero, error_metric, n=1)) %>%
                                 fit(training(splits_f_mcero))



set.seed(123)
wflw_fit_arxgb_tuned_f_mcero <-      wflw_arxgb_tune_f_mcero %>%
                             finalize_workflow(
                             select_best(tune_results_arxgb_f_mcero, error_metric, n=1)) %>%
                             fit(training(splits_f_mcero))


set.seed(123)
wflw_fit_ar_tuned_f_mcero <-   wflw_ar_tune_f_mcero %>%
                                   finalize_workflow(
                                   select_best(tune_results_ar_f_mcero, error_metric, n=1)) %>%
                                   fit(training(splits_f_mcero))


set.seed(123)
wflw_fit_nnetar_tuned_f_mcero <-   wflw_nnetar_tune_f_mcero %>%
                                   finalize_workflow(
                                   select_best(tune_results_nnetar_f_mcero, error_metric, n=1)) %>%
                                   fit(training(splits_f_mcero))




#modeltime_calibrate, esto serviria para calcular los valores ajustados

```








# modeltime table by specie

## PAMAFRO

```{r,message=F,warning=F}





model_tbl_v_pfro <- modeltime_table(
                    wflw_fit_phxgb_tuned_v_pfro,
                    wflw_fit_arxgb_tuned_v_pfro,
                    wflw_fit_ar_tuned_v_pfro,
                    wflw_fit_nnetar_tuned_v_pfro
                    
                    #wflw_fit_mars_tuned_v_pfro
)



model_tbl_f_pfro <- modeltime_table(
              wflw_fit_phxgb_tuned_f_pfro,
              wflw_fit_arxgb_tuned_f_pfro,
              wflw_fit_ar_tuned_f_pfro,
              wflw_fit_nnetar_tuned_f_pfro
              #wflw_fit_mars_tuned_f_pfro
)




```

## MALARIA CERO

```{r,message=F,warning=F}





model_tbl_v_mcero <- modeltime_table(
              wflw_fit_phxgb_tuned_v_mcero,
              wflw_fit_arxgb_tuned_v_mcero,
              wflw_fit_ar_tuned_v_mcero,
              wflw_fit_nnetar_tuned_v_mcero
)



model_tbl_f_mcero <- modeltime_table(
              wflw_fit_phxgb_tuned_f_mcero,
              wflw_fit_arxgb_tuned_f_mcero,
              wflw_fit_ar_tuned_f_mcero,
              wflw_fit_nnetar_tuned_f_mcero
)


```




# calibrate by ID ( province) and specie **

## PAMAFRO

```{r,message=F,warning=F}

calib_tbl_v_pfro <-   model_tbl_v_pfro %>%
                      modeltime_calibrate(
                        new_data = testing(splits_v_pfro), 
                        id       = "id",
                        quiet = FALSE
                      )


calib_tbl_f_pfro <-   model_tbl_f_pfro %>%
                      modeltime_calibrate(
                        new_data = testing(splits_f_pfro), 
                        id       = "id",
                        quiet = FALSE
                      )






```


## MALARIA CERO

```{r,message=F,warning=F}

calib_tbl_v_mcero <-  model_tbl_v_mcero %>%
                      modeltime_calibrate(
                        new_data = testing(splits_v_mcero), 
                        id       = "id",
                        quiet = FALSE
                      )


calib_tbl_f_mcero <-  model_tbl_f_mcero %>%
                      modeltime_calibrate(
                        new_data = testing(splits_f_mcero), 
                        id       = "id",
                        quiet = FALSE
                      )



```


# Fitted values

## PAMAFRO

### VIVAX 

```{r,message=F,warning=F}

## Fitted values
   
fitted_v_pfro<-  model_tbl_v_pfro %>%
                  modeltime_calibrate(
                                        new_data = training(splits_v_pfro), 
                                        id       = "id",
                                        quiet = FALSE
                                      ) %>% 
                 select(.model_desc,.calibration_data) %>% 
                 unnest()



saveRDS(fitted_v_pfro,"D:/proyectos_lab/its/fit_preintervention/fitted_values_vx_pfro2024v11_3.rds")

#saveRDS(fitted_v_pfro,"D:/proyectos_lab/its/fit_preintervention/fitted_values_vx_pfro2024v11_2.rds")


#saveRDS(fitted_v_pfro,"D:/proyectos_lab/its/fit_preintervention/fitted_values_vx_pfro2024v11.rds")







                   
                   
```

### FALCIPARUM 

```{r,message=F,warning=F}

## Fitted values
   
fitted_f_pfro<-  model_tbl_f_pfro %>%
                  modeltime_calibrate(
                                        new_data = training(splits_f_pfro), 
                                        id       = "id",
                                        quiet = FALSE
                                      ) %>% 
                 select(.model_desc,.calibration_data) %>% 
                 unnest()

saveRDS(fitted_f_pfro,"fit_preintervention/fitted_values_flpm_pfro2024v11_3.rds")
#saveRDS(fitted_f_pfro,"fit_preintervention/fitted_values_flpm_pfro2024v11_2.rds")

#saveRDS(fitted_f_pfro,"fit_preintervention/fitted_values_flpm_pfro2024v11.rds")

                   
```

## MALARIA CERO

### VIVAX 

```{r,message=F,warning=F}

## Fitted values
   
fitted_v_mcero<-  model_tbl_v_mcero %>%
                  modeltime_calibrate(
                                        new_data = training(splits_v_mcero), 
                                        id       = "id",
                                        quiet = FALSE
                                      ) %>% 
                 select(.model_desc,.calibration_data) %>% 
                 unnest()

saveRDS(fitted_v_mcero,"D:/proyectos_lab/its/fit_preintervention/fitted_values_vx_mcero2024v11_3.rds")
#saveRDS(fitted_v_mcero,"D:/proyectos_lab/its/fit_preintervention/fitted_values_vx_mcero2024v11_2.rds")

#saveRDS(fitted_v_mcero,"D:/proyectos_lab/its/fit_preintervention/fitted_values_vx_mcero2024v11.rds")


```

### FALCIPARUM 

```{r,message=F,warning=F}

## Fitted values
   
fitted_f_mcero<-  model_tbl_f_mcero %>%
                  modeltime_calibrate(
                                        new_data = training(splits_f_mcero), 
                                        id       = "id",
                                        quiet = FALSE
                                      ) %>% 
                 select(.model_desc,.calibration_data) %>% 
                 unnest()

saveRDS(fitted_f_mcero,"D:/proyectos_lab/its/fit_preintervention/fitted_values_flpm_mcero2024v11_3.rds")
#saveRDS(fitted_f_mcero,"D:/proyectos_lab/its/fit_preintervention/fitted_values_flpm_mcero2024v11_2.rds")

#saveRDS(fitted_f_mcero,"D:/proyectos_lab/its/fit_preintervention/fitted_values_flpm_mcero2024v11.rds")



                   
```


# Forecasted values

## PAMAFRO

```{r,message=F,warning=F}

tbl.forecast_v_pfro  <-  calib_tbl_v_pfro %>%
                  modeltime_forecast(
                      new_data    = testing(splits_v_pfro),
                      actual_data = db.pamafro,
                      conf_by_id  = TRUE
                  ) %>%
                  group_by(id) %>%
                  plot_modeltime_forecast(
                      .facet_ncol  = 3,
                      .interactive = FALSE
                  )

#Informacion de prediccion para graficar, y demas calculos descriptivos
db.tbl.frcst_v_pfro<-tbl.forecast_v_pfro$data
#saveRDS(db.tbl.frcst_v_pfro,"forecast_intervention/db_frcst_bestmodels_vx_pfro_7.rds")
# saveRDS(db.tbl.frcst_v_pfro,"D:/proyectos_lab/its/forecast_intervention/db_frcst_bestmodels_vx_pfro2024v11_1.rds")


saveRDS(db.tbl.frcst_v_pfro,"D:/proyectos_lab/its/forecast_intervention/db_frcst_bestmodels_vx_pfro2024v11_3.rds")

#saveRDS(db.tbl.frcst_v_pfro,"D:/proyectos_lab/its/forecast_intervention/db_frcst_bestmodels_vx_pfro2024v11_2.rds")


################################################################################

tbl.forecast_f_pfro  <-  calib_tbl_f_pfro %>%
                  modeltime_forecast(
                      new_data    = testing(splits_f_pfro),
                      actual_data = db.pamafro,
                      conf_by_id  = TRUE
                  ) %>%
                  group_by(id) %>%
                  plot_modeltime_forecast(
                      .facet_ncol  = 3,
                      .interactive = FALSE
                  )

#Informacion de prediccion para graficar, y demas calculos descriptivos
db.tbl.frcst_f_pfro<-tbl.forecast_f_pfro$data
# 
# saveRDS(db.tbl.frcst_f_pfro,"D:/proyectos_lab/its/forecast_intervention/db_frcst_bestmodels_flcpm_pfro2024v11_1.rds")




saveRDS(db.tbl.frcst_f_pfro,"D:/proyectos_lab/its/forecast_intervention/db_frcst_bestmodels_flcpm_pfro2024v11_3.rds")

#saveRDS(db.tbl.frcst_f_pfro,"D:/proyectos_lab/its/forecast_intervention/db_frcst_bestmodels_flcpm_pfro2024v11_2.rds")

```



## MALARIA CERO

```{r,message=F,warning=F}


tbl.forecast_v_mcero  <-  calib_tbl_v_mcero %>%
                  modeltime_forecast(
                      new_data    = testing(splits_v_mcero),
                      actual_data = db.mcero,
                      conf_by_id  = TRUE
                  ) %>%
                  group_by(id) %>%
                  plot_modeltime_forecast(
                      .facet_ncol  = 3,
                      .interactive = FALSE
                  )

#Informacion de prediccion para graficar, y demas calculos descriptivos
db.tbl.frcst_v_mcero<-tbl.forecast_v_mcero$data
# saveRDS(db.tbl.frcst_v_mcero,"D:/proyectos_lab/its/forecast_intervention/db_frcst_bestmodels_vx_mcero2024v11_1.rds")



saveRDS(db.tbl.frcst_v_mcero,"D:/proyectos_lab/its/forecast_intervention/db_frcst_bestmodels_vx_mcero2024v11_3.rds")

#saveRDS(db.tbl.frcst_v_mcero,"D:/proyectos_lab/its/forecast_intervention/db_frcst_bestmodels_vx_mcero2024v11_2.rds")



################################################################################

tbl.forecast_f_mcero  <-  calib_tbl_f_mcero %>%
                  modeltime_forecast(
                      new_data    = testing(splits_f_mcero),
                      actual_data = db.mcero,
                      conf_by_id  = TRUE
                  ) %>%
                  group_by(id) %>%
                  plot_modeltime_forecast(
                      .facet_ncol  = 3,
                      .interactive = FALSE
                  )

#Informacion de prediccion para graficar, y demas calculos descriptivos
db.tbl.frcst_f_mcero<-tbl.forecast_f_mcero$data



saveRDS(db.tbl.frcst_f_mcero,"D:/proyectos_lab/its/forecast_intervention/db_frcst_bestmodels_flcpm_mcero2024v11_3.rds")

#saveRDS(db.tbl.frcst_f_mcero,"D:/proyectos_lab/its/forecast_intervention/db_frcst_bestmodels_flcpm_mcero2024v11_2.rds")


# saveRDS(db.tbl.frcst_f_mcero,"D:/proyectos_lab/its/forecast_intervention/db_frcst_bestmodels_flcpm_mcero2024v11_1.rds")
#db.tbl.frcst_f_mcero <- readRDS("forecast_intervention/db_frcst_bestmodels_flcpm_mcero.rds")


```


